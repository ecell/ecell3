AC_REVISION([$Id$])dnl

sinclude([../libltdl/acinclude.m4])
dnl Process this file with autoconf to produce a configure script.

AC_INIT([ecell], [@ECELL_VERSION_NUMBER@])
AC_CONFIG_SRCDIR([libecs/Entity.hpp])

sinclude([../ecell_version.sh])


AC_CONFIG_HEADERS([ecell_config.h])

AM_INIT_AUTOMAKE

ECELL_DIRNAME=${PACKAGE}-${ECELL_MAJOR_VERSION}.${ECELL_MINOR_VERSION}

ECELL_VERSION_STRING=\"${ECELL_VERSION_NUMBER}\"

AC_DEFINE_UNQUOTED(ECELL_MAJOR_VERSION, ${ECELL_MAJOR_VERSION}, [Major version of the software.])
AC_DEFINE_UNQUOTED(ECELL_MINOR_VERSION, ${ECELL_MINOR_VERSION}, [Minor version of the software.])
AC_DEFINE_UNQUOTED(ECELL_MICRO_VERSION, ${ECELL_MICRO_VERSION}, [Micro version of the software.])
AC_DEFINE_UNQUOTED(ECELL_VERSION_STRING, ${ECELL_VERSION_STRING}, [Full version string of the software.])
AC_SUBST([ECELL_DIRNAME])
AC_SUBST([ECELL_MAJOR_VERSION])
AC_SUBST([ECELL_MINOR_VERSION])
AC_SUBST([ECELL_MICRO_VERSION])
AC_SUBST([ECELL_VERSION_STRING])


AM_SANITY_CHECK

AC_CANONICAL_HOST

if test "$prefix" = "NONE" ; then
  PREFIX="$ac_default_prefix"
else
  PREFIX="$prefix"
fi

AC_SUBST([PREFIX])

AC_ARG_ENABLE([gui], [AC_HELP_STRING([--disable-gui],
                      [build ecell without gui frontends.])],
  [], [enable_gui=yes]
)

AC_MSG_CHECKING([whether to build GUI frontends])
if test "$enable_gui" = "yes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AM_CONDITIONAL([ENABLE_GUI], [test "$enable_gui" = "yes"])

AC_ARG_ENABLE([pyecell], [AC_HELP_STRING([--disable-pyecell],
                          [build ecell without Python binding.])],
  [], [enable_pyecell=yes]
)

AC_MSG_CHECKING([whether to build Python binding / API])
if test "$enable_pyecell" = "yes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AM_CONDITIONAL([ENABLE_PYECELL], [test "$enable_pyecell" = "yes"])
dnl

dnl Checks for programs.

AC_PROG_CC
AC_PROG_CXX
AC_PROG_CPP
AC_PROG_CXXCPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

AM_DISABLE_STATIC
AC_LIBLTDL_CONVENIENCE(../libltdl)
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_LTDL_SHLIBEXT
if test -n "$shrext_cmds"; then
  eval LTDL_SHLIB_EXT=$shrext_cmds
elif test -n "$shrext"; then
  eval LTDL_SHLIB_EXT=$shrext
fi
AC_SUBST(LTDL_SHLIB_EXT)

dnl to circumvent libltdl weirdness (already fixed in the newer versions)
case $host_os in
  *cygwin* | *mingw* | *win32*)
    CPPFLAGS="$CPPFLAGS -DLT_SCOPE=extern"
    ;;
esac

rm -f conftest
./libtool --config > conftest
. ./conftest
rm -f conftest

if test "$enable_pyecell" = "yes"; then
  AM_PATH_PYTHON(2.2)
else
  PYTHON=echo
fi
AC_SUBST(PYTHON)

AC_LANG([C++])

dnl Checks for libraries.

dnl assuming libc and libm always present...

AC_CHECK_LIB(m, sin, LIBM="-lm")
AC_SUBST(LIBM)
dnl
AC_CHECK_LIB(c, open, LIBC="-lc")
AC_SUBST(LIBC)
dnl

ECELL_CHECK_GSL
if test "$enable_pyecell" = "yes"; then
  AM_CHECK_PYMOD(numpy,,,[AC_MSG_ERROR([could not find Python numpy module])])
  AM_CHECK_PYMOD(xml,,,[AC_MSG_ERROR([could not find Python xml module])])
  AM_CHECK_PYMOD(ply,,,[AC_MSG_ERROR([could not find Python ply module])])

  if test "$enable_gui" = 'yes'; then
    AM_CHECK_PYMOD(pygtk,,,[AC_MSG_ERROR([could not find Python pygtk module])])
    AM_CHECK_PYMOD(gtk,,,[AC_MSG_ERROR([could not find Python gtk module])])
    AM_CHECK_PYMOD(gtk.gdk,,,
                   [AC_MSG_ERROR([could not find Python gtk.gdk module])])
    AM_CHECK_PYMOD(gnomecanvas,,,[AC_MSG_WARN(could not find gnomecanvas module. model-editor will not work. )])
    AM_CHECK_PYMOD(xml.dom.minidom,,,[AC_MSG_WARN(could not find xml.dom.minidom module. model-editor will not work.)])
  fi
fi

dnl Checks for header files.

AC_HEADER_DIRENT
AC_HEADER_STDC

AC_CHECK_HEADERS([fcntl.h unistd.h memory.h sys/stat.h sys/types.h sys/mman.h sys/param.h sys/statvfs.h sys/statfs.h sys/mount.h sys/vfs.h])
AC_CHECK_HEADERS([unordered_map tr1/unordered_map])
AC_CHECK_HEADERS([windows.h])

AC_CHECK_HEADERS([stdint.h], [
  INT64_T_DECLARATION="#include <stdint.h>"
], [
  AC_CHECK_TYPE([long long], [
    INT64_T_DECLARATION="typedef long long int64_t; typedef unsigned long long uint64_t;"
  ], [
    AC_CHECK_TYPE([__int64], [
      INT64_T_DECLARATION="typedef __int64 int64_t; typedef unsigned __int64 uint64_t;"
    ], [
      INT64_T_DECLARATION=
    ])
  ])
])
AC_SUBST([INT64_T_DECLARATION])

ECELL_CHECK_MATH_HEADER
ECELL_CHECK_INFINITY
ECELL_CHECK_HUGE_VAL
ECELL_CHECK_NUMERIC_LIMITS_DOUBLE_INFINITY

if test "$HAVE_NUMERIC_LIMITS_DOUBLE_INFINITY" = 1; then
  INFINITY_VAL="std::numeric_limits<double>::infinity()"
elif test "$HAVE_INFINITY" = 1; then
  INFINITY_VAL="INFINITY"
elif test "$HAVE_HUGE_VAL" = 1; then
  INFINITY_VAL="HUGE_VAL"
fi
AC_SUBST([INFINITY_VAL])

ECELL_CHECK_PRETTY_FUNCTION

EXT_GUESS="../../../.. ../../.. ../.. ../ ./ $prefix /usr /usr/local /opt"

dnl dmtool package

if test "$DMTOOL_DIR" = "" ; then
  AC_MSG_CHECKING( for dmtool dir)
  ac_cv_dmtool_dir="no"
  for ac_dir in $EXT_GUESS ; do
    if test -d $ac_dir/dmtool ; then
      ac_cv_dmtool_dir=`(cd $ac_dir ; pwd)`
      DMTOOL_DIR=$ac_cv_dmtool_dir
    fi
  done

  if test "$DMTOOL_DIR" = "" ; then        
    AC_MSG_ERROR("dmtool not found.")
  fi

  AC_MSG_RESULT($ac_cv_dmtool_dir)
  DMTOOL_DIR=$ac_cv_dmtool_dir
  DMTOOL_INCLUDE_DIR=$ac_cv_dmtool_dir
fi
AC_SUBST(DMTOOL_DIR)
AC_SUBST(DMTOOL_INCLUDE_DIR)

ECELL_CHECK_BOOST(, [AC_MSG_ERROR([could not find Boost C++ library])])
ECELL_CHECK_BOOST_RANGE_ADL_BARRIER
ECELL_CHECK_BOOST_SPIRIT
if test -z "$BOOST_RANGE_ADL_BARRIER"; then
  HAVE_BOOST_RANGE_ADL_BARRIER='#undef HAVE_BOOST_RANGE_ADL_BARRIER'
else
  HAVE_BOOST_RANGE_ADL_BARRIER='#define HAVE_BOOST_RANGE_ADL_BARRIER 1'
fi
if test -z "$BOOST_SPIRIT_CLASSIC"; then
  HAVE_BOOST_SPIRIT_CLASSIC='#undef HAVE_BOOST_SPIRIT_CLASSIC'
else
  HAVE_BOOST_SPIRIT_CLASSIC='#define HAVE_BOOST_SPIRIT_CLASSIC 1'
fi

AC_SUBST(HAVE_BOOST_RANGE_ADL_BARRIER)
AC_SUBST(HAVE_BOOST_SPIRIT_CLASSIC)

ECELL_CHECK_HDF5_CPP(, [AC_MSG_ERROR([could not find HDF5 C++ library])])

USE_COMPILER_EXTENSIONS=no
AC_MSG_CHECKING( if use of compiler specific features are allowed )

if test "$enable_pyecell" = "yes"; then
  AM_CHECK_PYTHON_HEADERS(,[AC_MSG_ERROR([Failed to find Python headers.])])
  ECELL_CHECK_PYTHON_LIBS
  BOOST_PYTHON_LIBNAME=boost_python
  AC_ARG_WITH(boost-python-libname,
    AC_HELP_STRING([--with-boost-python-libname=LIBNAME],
                   [specify the library name of Boost.Python [[boost_python]]]
                  ),
    [BOOST_PYTHON_LIBNAME=$withval]
  )
  ECELL_CHECK_BOOST_PYTHON(, [AC_MSG_ERROR([could not find Boost.Python library])])
else
  BOOST_PYTHON_LIBNAME=
fi
AC_SUBST(BOOST_PYTHON_LIBNAME)

AM_CONDITIONAL([HAVE_PYTHON_LIB], [test ! -z "$PYTHON_LIBS"])
AC_SUBST([PYTHON_LIBS])

AC_ARG_ENABLE( compiler-extensions,,
               USE_COMPILER_EXTENSIONS=yes,
               USE_COMPILER_EXTENSIONS=no
               )
AC_MSG_RESULT( $USE_COMPILER_EXTENSIONS )

if test "$USE_COMPILER_EXTENSIONS" != no ; then
  AC_MSG_CHECKING( for gcc-specific optimization )
  AC_SUBST(USE_COMPILER_EXTENSIONS)
  AC_DEFINE([USE_COMPILER_EXTENSIONS],1,[make use of gcc specific features])
  CXXFLAGS="$CXXFLAGS -Wno-pmf-conversions"
  AC_SUBST(CXXFLAGS)
  AC_MSG_RESULT( $CXXFLAGS )
fi
   
AC_LANG_PUSH([C])

AC_SYS_LARGEFILE

AC_C_CONST
AC_C_INLINE
if test "$ac_cv_c_inline" != no ; then
  AC_DEFINE([HAVE_INLINE],1,[define if inline is supported])
  AC_SUBST(HAVE_INLINE)
fi

AC_CHECK_TYPES([ssize_t],,,[
#include <sys/types.h>
])
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_C_LONG_DOUBLE
if test "$HAVE_LONG_DOUBLE" = 1; then
  HIGHREAL_TYPE="long double"
  HIGHREAL_IS_REAL=0
else
  HIGHREAL_TYPE="double"
  HIGHREAL_IS_REAL=1
fi
AC_SUBST([HIGHREAL_TYPE])
AC_SUBST([HIGHREAL_IS_REAL])

AC_LANG_POP([])

AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(long double)


dnl Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(mkdir select strdup strerror strtod uname modf modfl)
AC_CHECK_FUNCS(strdup strstr)

AC_CONFIG_FILES([
    Makefile
    bin/Makefile
    dm/Makefile
    libecs/Defs.hpp  
    libecs/Makefile
    libecs/scripting/Makefile
    libecs/tests/Makefile
    libemc/Makefile
    pyecell/Makefile
    pyecell/setup.py
    pyecell/ecell/config.py
    frontend/Makefile
    frontend/session-monitor/Makefile
    frontend/session-monitor/glade/Makefile
    frontend/session-monitor/plugins/Makefile
    frontend/model-editor/Makefile
    frontend/model-editor/doc/Makefile
    frontend/model-editor/glade/Makefile
    frontend/model-editor/plugins/Makefile
])
AC_CONFIG_FILES([bin/ecell3-dmc], [chmod +x bin/ecell3-dmc])
AC_CONFIG_FILES([pyecell/ecell3-python], [chmod +x pyecell/ecell3-python])
AC_CONFIG_FILES([pyecell/ecell3-em2eml], [chmod +x pyecell/ecell3-em2eml])
AC_CONFIG_FILES([pyecell/ecell3-eml2em], [chmod +x pyecell/ecell3-eml2em])
AC_CONFIG_FILES([pyecell/ecell3-eml2sbml], [chmod +x pyecell/ecell3-eml2sbml])
AC_CONFIG_FILES([pyecell/ecell3-sbml2eml], [chmod +x pyecell/ecell3-sbml2eml])
AC_CONFIG_FILES([pyecell/ecell3-session], [chmod +x pyecell/ecell3-session])
AC_CONFIG_FILES([pyecell/ecell3-session-manager], [chmod +x pyecell/ecell3-session-manager])
AC_OUTPUT
