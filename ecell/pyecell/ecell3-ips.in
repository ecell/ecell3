#!/usr/bin/env @prefix@/bin/ecell3-python

'''
ecell3-ips -- invoke ecell3 IPython interactive mode or run ess file

Usage:
    ecell3-ips ( -f <EML_file> | --file=<EML_file> ) [ --parameter=<name_value>... ]
    ecell3-ips [ -C ] ( -e <ESS_file> | --exec=<ESS_file> ) [ --parameter=<name_value>... ]
    ecell3-ips [ --parameter=<name_value>... ]
    ecell3-ips ( -h | --help )

Options:
    -e <ESS_file> --exec=<ESS_file>  Load script file <ESS_file>.
    -f <EML_file> --file=<EML_file>  Load model file <EML_file> and then switch to intractive mode.
    -C                               Change to the directory where the script file <ESS_file> is placed.
    --parameter=<name_value>         Set one or more session parameters. <name_value> is a pair of a name and a value linked by a colon.
    -h --help                        Show this.

    Example: 
      ecell3-ips --parameter=NAME1:VALUE1 --parameter=NAME2:VALUE2

Configurations:
    If ECELL3_DM_PATH environment variable is set to a colon ({pathsep})
    separated directory path, it tries to find dynamic modules within the
    locations referred to by it.

    Example: 
      ECELL3_DM_PATH=/home/user/dm{pathsep}/home/user/dm_other ecell3-ips
'''

__program__ = 'ecell3-ips'
__version__ = '0.1'
__author__ = 'Yasuhiro Naito'
__copyright__ = 'Copyright (C) 2014 Keio University, 2014 RIKEN'
__license__ = 'GPL'


import sys
import os
from docopt import docopt
from schema import Schema, SchemaError, Or

import IPython

import ecell.config
import ecell.ecs
import ecell.emc
from ecell.Session import Session, createScriptContext

#FIXME: commandline processing needed


def validate_opts( opts ):

    schema = Schema({
        "--exec": Or( None, os.path.exists ),
        "--file": Or( None, os.path.exists ), 
        "--help": bool, 
        "--parameter": list, 
        "-C": bool
    })

    opts = schema.validate( opts )

    return opts


def main():

    aParameters = {}

    opts = docopt( __doc__.format( pathsep = os.pathsep ) )
    
    try:
        opts = validate_opts( opts )
    except SchemaError as e:
        print( e )
        sys.exit( -1 )
        
    # set session parameters
    #FIXME: parameters processing needed
    
    
    aSimulator = ecell.emc.Simulator()
    aSimulator.setDMSearchPath( aSimulator.DM_SEARCH_PATH_SEPARATOR.join( ecell.config.dm_path ) )

    aSession = Session( aSimulator )

    banner = '''ecell3-ips (E-Cell3 IPython Session)
[ E-Cell SE Version {}, on IPython with {} Python {:d}.{:d}.{:d} ]
Copyright (C) 1996-2014 Keio University
Copyright (C) 2008-2014 RIKEN
Copyright (C) 2005-2009 The Molecular Sciences Institute
More info: http://www.e-cell.org/software'''.format(
        ecell.ecs.getLibECSVersion(),
        IPython.__version__,
        sys.version_info.major, 
        sys.version_info.minor, 
        sys.version_info.micro )

    session_ns = createScriptContext( aSession, aParameters )

    if opts[ "--file" ]:
        aSession.loadModel( opts[ "--file" ] )
        banner = "{}\n\n'{}' is loaded. ( t = {} )\n".format( banner, opts[ "--file" ], aSession.getCurrentTime() )

    if opts[ "--exec" ]:
        # change directory where ESS file is placed.
        if opts[ "-C" ]:
            anEssDirectory, opts[ "--exec" ] = os.path.split( opts[ "--exec" ] )
            os.chdir( anEssDirectory )
        execfile( opts[ "--exec" ], session_ns )    ### NOT IPython context ###
    else:
        IPython.embed( user_ns = session_ns, banner1 = banner )
         
if __name__ == '__main__':
    main()
    sys.exit( 0 )
