<?xml version="1.0" encoding="US-ASCII"?>

<chapter id="scripting"> 
  <title>Scripting A Simulation Session</title> 

  <highlights>
    <para>By reading this chapter, you can get information about the
    following items:
      <simplelist>
	<member>What is &ecell; Session Script (&ESS;).</member>

	<member>How to run &ESS; in scripting mode.</member>

	<member>How to use &ESS; in GUI mode.</member>

	<member>How to automate a simulation run by writing an
          &ESS; file.</member>

        <member>How to write frontend software components for &ecell; in &Python;.</member>

      </simplelist>
</para>
  </highlights>

  <sect1>
    <title>Session Scripting</title>

    <para>An &ecell; Session Script (&ESS;) is a
&Python; script which is loaded by a &ecell;  &Session; object.  A
&Session; instance represents a single run of a simulation.</para>

    <para>An &ESS; is used to automate a single run of a simulation session.
  A simple simulation run typically involves the following five stages:
<orderedlist>
	<listitem>
	  <para>Loading a model file.</para>
	  <para>Usually an &EML; file is loaded.</para>
	</listitem>
	<listitem>
	  <para>Pre-simulation setup of the simulator.</para> <para>
	  Simulator and model parameters, such as initial
	  values of &Variable; objects and
	  property values of &Process; objects,
	  are set and/or altered.  Also, data
	  &Logger;s may be created in this phase.</para>
	</listitem>
	<listitem>
	  <para>Running the simulation.</para>
	  <para>The simulation is run for a certain length of time.</para>
	</listitem>
	<listitem>
	  <para>Post-simulation data processing.</para>
	  <para>In this phase, the resulting state of the model after
	  the simulation and the data logged by the
	  &Logger; objects are examined.  The
	  simulation result may be numerically processed. If
	  necessary, go back to the previous step and run the
	  simulation for more seconds.</para>
	</listitem>
	<listitem>
	  <para>Data saving.</para>
	  <para>Finally, the processed and raw
	  simulation result data are saved to files.</para>
	</listitem>
      </orderedlist>
</para>

    <para>An &ESS; file usually has an extension '<filename>.py</filename>'.</para>

  </sect1>


  <sect1>
    <title>Running &ecell; Session Script</title>

    <para>There are three ways to execute &ESS;;

      <itemizedlist>
	<listitem>
	  <para>Execute the script from the operating system's command
	  line (the shell prompt).
          </para>
	</listitem>
	<listitem>
	  <para>Load the script from frontend software such as
	  &Osogo;.</para>
	</listitem>
	<listitem>
	  <para>Use &SessionManager; to automate
	  the invokation of the simulation sessions itself.  This is
	  usually used to write mathematical analysis scripts, such as
	  parameter tuning, which involves multiple runs of the
	  simulator.</para>
	</listitem>

      </itemizedlist>
    </para>

    <sect2>
      <title>Running &ESS; in command line mode</title>

      <para>An &ESS; can be run by using
      &ecell3-session; command either in
      <emphasis>batch mode</emphasis> or in <emphasis>interactive
      mode</emphasis>.
      </para>
      
      <sect3>
	<title>Batch mode</title>

	<para>
	To execute an &ESS; file without user
	interaction, type the following command at the shell prompt:

        <screen>
          <prompt>$</prompt> <userinput>&ecell3-session; <optional>-f model.eml</optional> <optional>-e</optional> <replaceable>ess.py</replaceable>
          </userinput>
        </screen>

        &ecell3-session; command creates a simulation
&Session; object and executes the
&ESS; file <filename>ess.py</filename> on it.  The
option <optional>-e</optional> can be omitted.  Optionally, if
<optional>-f model.eml</optional> is given, the &EML;
file <filename>model.eml</filename> is loaded immediately before
executing the &ESS;.
      </para>

      </sect3>

      <sect3>
	<title>Interactive mode</title>

	<para>To run the &ecell3-session; in
	interactive mode, invoke the command without an
	&ESS; file.

        <screen><prompt>$</prompt> <userinput>&ecell3-session; <optional>-f model.eml</optional></userinput>
ecell3-session [ for E-Cell SE Version 3, on Python Version 2.2.1 ]
Copyright (C) 1996-2009 Keio University.
Send feedback to Koichi Takahashi <email>shafi@e-cell.org</email>
<prompt>ecell3-session>>> </prompt>
        </screen>
        
        The banner and the prompt shown here may vary according to the
        version you are using.  If the option <optional>-f model.eml</optional>
is given, the &EML; file <filename>model.eml</filename> is loaded immediately before prompting.
</para>
      </sect3>

      <sect3>
	<title>Giving parameters to the script</title>

	<para>Optionally <emphasis>session parameters</emphasis> can
	be given to the script. Given session parameters can be
	accessible from the &ESS; script as global
	variables (see the following section).</para>

	<para>To give the &ESS; parameters from the
	&ecell3-session; command, use either
	<option>-D</option> or <option>--parameters=</option>
	option.
        <screen>
          <prompt>$</prompt> <userinput>&ecell3-session; <option>-D</option><replaceable>NAME1</replaceable>=<replaceable>VALUE1</replaceable> <option>-D</option><replaceable>NAME2</replaceable>=<replaceable>VALUE2</replaceable>...</userinput>
          <prompt>$</prompt> <userinput>&ecell3-session; <option>--parameters="</option>{'<replaceable>NAME1</replaceable>':<replaceable>VALUE1</replaceable>,'<replaceable>NAME2</replaceable>':<replaceable>VALUE2</replaceable>,...}"</userinput>
        </screen>
Both ways, <option>-D</option> and <option>--parameters</option>, can be mixed.
</para>
	<para></para>
      </sect3>


    </sect2>

    <sect2>
      <title>Loading &ESS; from &Osogo;</title>

      <para>To manually load an &ESS; file from the GUI, use
      <guimenu>File</guimenu>-><guimenuitem>loadScript</guimenuitem>
      menu button.</para>

      <para>&gecell; command accepts
      <option>-e</option> and <option>-f</option> options in the same way as the
      &ecell3-session; command.</para>

    </sect2>

    <sect2>
      <title>Using SessionManager</title>

      <para>(a separate chapter?)</para>

    </sect2>

  </sect1>

  <sect1>
    <title>Writing &ecell; Session Script</title>

    <para>The syntax of &ESS; is a full set of
    &Python; language with some convenient
    features.</para>

    <sect2>
      <title>Using Session methods</title>

      <sect3>
	<title>General rules</title>

	<para>In &ESS;, an instance of
    &Session; is given, and any methods defined
    in the class can be used as if it is defined in the global namespace.
    </para>

	<para>For example, to run the simulation for 10 seconds, use
    <methodname>run</methodname> method of the
    &Session; object.
    <informalexample> 
	    <programlisting>self.run( 10 )</programlisting>
	  </informalexample> 
    where <methodname>self.</methodname> points to the current
    &Session; object given by the
    system. Alternatively, you can use <varname>theSession</varname> 
    in place of the <varname>self</varname>.
    <informalexample> 
	    <programlisting>theSession.run( 10 )</programlisting>
	  </informalexample> 
    </para>

	<para>Unlike usual &Python; script, you
    can omit the object on which the method is called if the method is for
    the current &Session;.
    <informalexample>
	    <programlisting>run( 10 )</programlisting>
	  </informalexample>
    </para>

      </sect3>


      <sect3>
	<title>Loading a model</title>

	<para>Let's try this in the interactive mode of the
      &ecell3-session; command.  On the prompt of the
      command, load an &EML; file by using
      <methodname>loadModel</methodname>() method.

      <informalexample>
	    <screen><prompt>ecell3-session>>> </prompt><userinput>loadModel( 'simple.eml' )</userinput></screen>
	  </informalexample>
    
    Then the prompt changes from <prompt>ecell3-session>>> </prompt>
    to <prompt><replaceable>model_name</replaceable>,
    t=<replaceable>current time</replaceable>>>> </prompt>
    <informalexample><screen><prompt>simple.eml, t=0>>> </prompt></screen>
	  </informalexample>
    </para>
      </sect3>

      <sect3>
	<title>Running the simulation</title>

	<para>To proceed the time by executing the simulation,
	<methodname>step</methodname>() and
	<methodname>run</methodname>() methods are used.</para>

	<informalexample><screen><prompt>simple.eml, t=0>>> </prompt><userinput>step()</userinput>
<prompt>simple.eml, t=0>>> </prompt><userinput>step()</userinput>
<prompt>simple.eml, t=7.67306e-07>>> </prompt><userinput>run( 10 )</userinput>
<prompt>simple.eml, t=10.0032>>> </prompt>
</screen>
	</informalexample>

	<para>
          <methodname>step</methodname>( <parameter>n</parameter> )
 conducts <parameter>n</parameter> steps of the simulation. The
 default value of <parameter>n</parameter> is 1.</para>

	<note>
	  <para>In above example you may notice that the first
	  call of <methodname>step</methodname>() does not cause the
	  time to change.  The simulator updates the time at the
	  beginning of the step, and calculates a tentative step size
	  after that.  The initial value of the step size is zero.
	  Thus it needs to call <methodname>step</methodname>() twice
	  to actually proceed the time.  See chapter 6 for details of
	  the simulation mechanism.</para>
	</note>

	<para>To execute the simulation for some seconds, call
	<methodname>run</methodname> method with a duration in
	seconds.  (e.g. <methodname>run</methodname>(
	<constant>10</constant> ) for 10 seconds.)
	<methodname>run</methodname> method steps the simulation
	repeatedly, and stops when the time is proceeded for the given
	seconds. In other words, the meaning of
	<methodname>run</methodname>( <parameter>10</parameter> ) is
	to run the simulation <emphasis>at least</emphasis> 10
	seconds.  It always overrun the specified length of
	time to a greater or less.</para>


	<para>The system supports <methodname>run</methodname>
	  without an argument to run forever, if and only if both
	  <emphasis>event checker</emphasis> and <emphasis>event
	  handler</emphasis> are set.  If not, it raises an exception.
	  See <methodname>setEventChecker</methodname>() in the method
	  list of Session class. 
	  </para>

	

      </sect3>
      
      <sect3>
	<title>Getting current time</title>

	<para>To get the current time of the simulator,
	<methodname>getCurrentTime</methodname>() method can be used.</para>

	<informalexample><screen>
<prompt>simple.eml, t=10.0032>>> </prompt><userinput>getCurrentTime()</userinput>
<computeroutput>10.003221620379463</computeroutput>
</screen>
	</informalexample>

      </sect3>
      
      <sect3>
	<title>Printing messages</title>

	<para>You may want to print some messages in your &ESS;.
        Use <methodname>message</methodname>( <parameter>message</parameter> )
	method, where <parameter>message</parameter> argument is a
	string to be outputed.</para>

	<para>By default the message is handled in a way the same as
         the Python's <methodname>print</methodname> statement; it is
         printed out to the standard out with a trailing new line.
         This behavior can be changed by using
         <methodname>setMessageMethod</methodname>() method.</para>

      </sect3>


      <sect3>
	<title>An example of using &Session; methods</title>

	<para>Here is a tiny example of using
	&Session; methods which loads a model,
	run a hundred seconds, and print a short message.

<example>
	    <title>A simple &ESS; example.</title>
	    
	    <programlisting linenumbering="numbered">loadModel( 'simple.eml' )
run( 100 )
message( 'stopped at %f seconds.' % getCurrentTime() )
</programlisting>
	  </example>
        </para>
	
      </sect3>



    </sect2>

    <sect2>
      <title>Getting Session Parameters.</title>

      <para>Session parameters are given to an &ESS; as global variables.
      Therefore usage of the session parameters is very simple.  For
      example, if you can assume a session parameter
      <varname>MODELFILE</varname> is given, just use it as a
      variable:
<informalexample>
	  <programlisting>loadModel( MODELFILE )</programlisting>
	</informalexample>
      </para>

      <para>To check what parameters are given to &ESS;, use
      <methodname>dir</methodname>() or
      <methodname>globals</methodname>() built-in functions.  Session
      parameters are listed as well as other available methods and
      variables.   To check if a certain &ESS; parameter or a global variable is given, write an if statement like this:
<informalexample>
	  <programlisting>if 'MODELFILE' in globals():
    # MODELFILE is given
else:
    # not given</programlisting>
	</informalexample>

</para>


      <note>
	<para>Currently there is no way to distinguish the Session
      parameters from other global variables from &ESS;.</para>
      </note>


    </sect2>


    <sect2>
      <title>Observing and Manipulating the Model with &ObjectStub;s</title>

      <sect3>
	<title>What is &ObjectStub;?</title>

	<para>&ObjectStub; is a proxy object in
	the frontend side of the system which corresponds to an
	internal object in the simulator.  Any operations on the simulator's
	internal objects should be done via the
	&ObjectStub;.</para>


	<para>There are three types of
	&ObjectStub;:
<itemizedlist>
	    <listitem>
	      <para>&EntityStub;</para>
	    </listitem>
	    <listitem>
	      <para>&StepperStub;</para>
	    </listitem>
	    <listitem>
	      <para>&LoggerStub;</para>
	    </listitem>
	  </itemizedlist>

	each correspond to
	&Entity;, &Stepper;,
	and &Logger; classes in the simulator,
	respectively.</para>

      </sect3>


      <sect3>
	<title>Why &ObjectStub; is needed</title>


	<para>&ObjectStub; classes are actually
	thin wrappers over the
	<classname>ecell.ecs.Simulator</classname> class of the E-Cell
	Python Library, which provides object-oriented appearance to
	the flat procedure-oriented API of the class.  Although
	&Simulator; object can be accessed
	directly via <varname>theSimulator</varname> property of
	&Session; class, use of
	&ObjectStub; is encouraged.</para>

	<para>This backend / frontend isolation is needed because
        lifetimes of backend objects are not the same as that of frontend
        objects, nor are their state transitions necessarily
        synchronous.  If the frontend directly manipulates the
        internal objects of the simulator, consistency of the lifetime
        and the state of the objects can easily be violated, which
        must not happen, without some complicated and tricky software
        mechanism.</para>

      </sect3>




      <sect3>
	<title>Creating an &ObjectStub; by ID</title>

	<para>To get an &ObjectStub; object,
	<methodname>createEntityStub</methodname>(),
	<methodname>createStepperStub</methodname>(), and
	<methodname>createLoggerStub</methodname>() methods of
	&Session; class are used.</para>

	<para>For example, to get an &EntityStub;,
	call the <methodname>createEntityStub</methodname>() method
	with a <emphasis>FullID</emphasis> string:</para>

	<informalexample>
	  <programlisting><varname>anADPStub</varname> = createEntityStub( <replaceable>'Variable:/CELL/MT1:ADP'</replaceable> )</programlisting>
	</informalexample>

	<para>Similarly, a &StepperStub; object
	and a &LoggerStub; object can be retrieved
	with a <emphasis>StepperID</emphasis> and a
	<emphasis>FullPN</emphasis>, respectively.</para>

	<informalexample>
	  <programlisting><varname>aStepperStub</varname> = createStepperStub( <replaceable>'STEPPER_01'</replaceable> )</programlisting> 

	  <programlisting><varname>aLoggerStub</varname> = createLoggerStub( <replaceable>'Variable:/CELL/MT1:GLUCOSE:Concentration' </replaceable> )</programlisting>
	</informalexample>


      </sect3>


      <sect3>
	<title>Creating and checking existence of the backend object</title>

	<para>Creating an &ObjectStub; does not necessarily mean a
	corresponding object in the simulator backend exists, or is
	created.  In other words, creation of the &ObjectStub; is
	purely a frontend operation.  After creating an &ObjectStub;,
	you may want to check if the corresponding backend object
	exists, and/or to command the backend to create the backend
	object.</para>

	<para>To check if a corresponding object to an
	&ObjectStub; exists in the simulator, use
	<methodname>exists</methodname>() method.  For example, the
	following if statement checks if a Stepper whose ID is
	<literal>STEPPER_01</literal> exists:
<informalexample>
	    <programlisting>aStepperStub = createStepperStub( 'STEPPER_01' )
if aStepperStub.exists():
    # it already exists
else:
    # it is not created yet</programlisting>
	  </informalexample>
	</para>

	<para>To create the backend object, just call
	<methodname>create</methodname>() method.
<informalexample>
	    <programlisting>aStepperStub.create()<lineannotation># Stepper 'STEPPER_01' is created here</lineannotation>
</programlisting>
	  </informalexample></para>

      </sect3>

      <sect3>
	<title>Getting the name and a class name from an &ObjectStub;</title>

	<para>To get the name (or an ID) of an
	&ObjectStub;, use
	<methodname>getName</methodname>() method.</para>

	<para>To get the class name of an
	&EntityStub; or a
	&StepperStub;, call
	<methodname>getClassName</methodname>() method.  This
	operation is not applicable to
	&LoggerStub;.</para>

      </sect3>



      <sect3>
	<title>Setting and getting properties</title>

	<para>As described in the previous chapters,
	&Entity; and
	&Stepper; objects has
	<emphasis>properties</emphasis>.  This section describes how
	to access the object properties via
	&ObjectStub;s.  This section is not
	applicable to &LoggerStub;s.</para>

	<para>To get a property value from a backend object by using
	an &EntityStub; or a
	&StepperStub;, invoke
	<methodname>getProperty</methodname>() method or access an
	object attribute with a
	property name:
<informalexample>
	    <programlisting>aValue = aStub.getProperty( 'Activity' )</programlisting></informalexample>
or equivalently,
<informalexample>
	    <programlisting>aValue = aStub[ 'Activity' ]</programlisting>
	  </informalexample></para>

	<para>To set a new property value to an
	&Entity; or a
	&Stepper;, call
	<methodname>setProperty</methodname>() method or mutate an
	object attribute with a	property name and the new value:
<informalexample>
	    <programlisting>aStub.getProperty( 'Activity', aNewValue )</programlisting> 
	  </informalexample>
or equivalently, 
<informalexample>
	    <programlisting>aStub[ 'Activity' ] = aNewValue</programlisting>
	  </informalexample>
</para>

	<para>List of all the properties can be gotten by using
	<methodname>getPropertyList</methodname> method, which returns
	a list of property names as a Python
	&tuple; containing string objects.
<informalexample>
	    <programlisting>aStub.getPropertyList()</programlisting>
	  </informalexample>
</para>

	<para>To know if a property is <emphasis>getable</emphasis>
	(accessible) or <emphasis>setable</emphasis> (mutable), call
	<methodname>getPropertyAttribute</methodname>() with the name
	of the property.  The method returns a Python
	&tuple; whose first element is true if the property
	is setable, and the second element is true if it is getable.
	Attempts to get a value from an inaccessible property and to
	set a value to a immutable property result in
	exceptions.
<informalexample>
	    <programlisting>aStub.getPropertyAttribute( 'Activity' )[0] <lineannotation># <constant>true</constant> if setable</lineannotation>
aStub.getPropertyAttribute( 'Activity' )[1] <lineannotation># <constant>true</constant> if getable</lineannotation></programlisting>
	  </informalexample>
</para>

      </sect3>

      <sect3>
	<title>Getting &Logger; data</title>

	<para>To get logged data from a &LoggerStub;,
 use <methodname>getData</methodname>() method.</para>

	<para><methodname>getData</methodname>() method has three forms according to requested range and time resolution of the data:
<itemizedlist>
	    <listitem>
	      <para>getData()</para>
	      <para>Get the whole data.</para>
	    </listitem>
	    <listitem>
	      <para>getData( <parameter>starttime</parameter>
	      <optional>, <parameter>endtime</parameter></optional>
	      )</para> <para>Get a slice of the data from
	      <parameter>starttime</parameter> to
	      <parameter>endtime</parameter>.  If
	      <parameter>endtime</parameter> is omitted, the slice
	      includes the tail of the data.</para>
	    </listitem>
	    <listitem>
	      <para>getData( <parameter>starttime</parameter>,
	      <parameter>endtime</parameter>,
	      <parameter>interval</parameter> )</para> <para>Get a
	      slice of the data from <parameter>starttime</parameter>
	      to <parameter>endtime</parameter>.  This omits data
	      points if a time interval between two datapoints is
	      smaller than <parameter>interval</parameter>.  This is
	      not suitable for scientific data analysis, but optimized
	      for speed.</para>
	    </listitem>
	  </itemizedlist>
	<methodname>getData</methodname>() method returns a rank-2 (matrix)
	&array; object of &NumericPython; module.  The &array; has
	either one of the following forms:
<informalexample>
	    <programlisting>[ [ time value average min max ]
  [ time value average min max ]
... ] </programlisting>
	  </informalexample>
or
<informalexample>
	    <programlisting>[ [ time value ]
  [ time value ]
... ] </programlisting>
	  </informalexample>
The first five-tuple data format has five values in a single datapoint:

<itemizedlist>
	    <listitem>
	      <para>time</para>
	      <para>The time of the data point.</para>
	    </listitem>
	    <listitem>
	      <para>value</para>
	      <para>The value at the time point.</para>
	    </listitem>
	    <listitem>
	      <para>average</para>
	      <para>The time-weighted average of the value after the last data point to the time of this data point.</para>
	    </listitem>
	    <listitem>
	      <para>min</para>
	      <para>The minimum value after the last data point to the time of this data point.</para>
	    </listitem>
	    <listitem>
	      <para>max</para>
	      <para>The maximum value after the last data point to the time of this data point.</para>
	    </listitem>
	  </itemizedlist>
The two-tuple data format has only time and value.
</para>




	<para>To know the start time, the end time, and the size of
the logged data before getting data, use
<methodname>getStartTime</methodname>(),
<methodname>getEndTime</methodname>(), and
<methodname>getSize</methodname>() methods of
&LoggerStub;.  <methodname>getSize</methodname>() returns the number of data points stored in the &Logger;.</para>


      </sect3>

      <sect3>
	<title>Getting and changing logging interval</title>
	<para>Logging interval of a &Logger; can
	be checked and changed by using
	<methodname>getMinimumInterval</methodname>() and
	<methodname>setMinimumInterval</methodname>(
	<parameter>interval</parameter> ) methods of
	&LoggerStub;.
	<parameter>interval</parameter> must be a zero or positive
	number in second.  If <parameter>interval</parameter> is a non-zero
	positive number, the &Logger; skips
	logging if a simulation step occurs before
	<parameter>interval</parameter> second past the last logging
	time point.  If <parameter>interval</parameter> is zero, the
	&Logger; logs at every simulation step.</para>
      </sect3>

      <sect3>
	<title>An example usage of an &EntityStub;</title>

	<para>The following example loads an EML file, and prints the
	value of ATP &Variable; in
	&System; <constant>/CELL</constant> every
	10 seconds.  If the value is below 1000, it stops the simulation.
</para>
	<example>
	  <title>An &ESS; to check ATP level every 10 seconds</title>
	  
	  <programlisting linenumbering="numbered">loadModel( 'simple.eml' )

ATP = createEntityStub( 'Variable:/CELL:ATP' )

while 1:

    ATPValue = ATP[ 'Value' ]

    message( 'ATP value = %s' % ATPValue )

    if ATPValue &lt;= 1000:
        break

    run( 10 )

message( 'Stopped at %s.' % getCurrentTime() )
</programlisting>
	</example>

      </sect3>

    </sect2>

  </sect1>

  <sect1>
    <title>Handling Data Files</title>

    <sect2>
      <title>About &ECD; file</title>

      <para>&ecell; SE uses &ECD; (E-Cell Data) file
format to store simulation results. &ECD; is a plain
text file, and easily handled by user-written and third-party data
processing and plotting software such as
<productname>gnuplot</productname>.</para>

      <para>An &ECD; file can store a matrix of
	floating-point numbers.</para>

      <para><classname>ecell.ECDDataFile</classname> class can be
used to save and load &ECD; files.  A
<classname>ECDDataFile</classname> object takes and returns a rank-2
&array; of &NumericPython;.  A
'rank-2' &array; is a matrix, which means that
<methodname>Numeric.rank( ARRAY )</methodname> and <methodname>len(
Numeric.shape( ARRAY ) )</methodname> returns
'<constant>2</constant>'.</para>

    </sect2>

    <sect2>
      <title>Importing <classname>ECDDataFile</classname> class</title>

      <para>To import the <classname>ECDDataFile</classname> class,
      import the whole <classname>ecell</classname> module,
<programlisting>import ecell</programlisting>
      or import <classname>ecell.ECDDataFile</classname> module selectively.
<programlisting>import ecell.ECDDataFile</programlisting>
</para>

    </sect2>

    <sect2>
      <title>Saving and loading data</title>
      
      <para>To save data to an &ECD; file, say,
	<filename>datafile.ecd</filename>, instantiate an
	<classname>ECDDataFile</classname> object and use
	<methodname>save</methodname>() method.
	<informalexample>
	  <programlisting>import ecell
aDataFile = ecell.ECDDataFile( DATA )
aDataFile.save( 'datafile.ecd' )
</programlisting>
	</informalexample>
          here <varname>DATA</varname> is a rank-2 &array;
          of &NumericPython; or an
          equivalent object.  The data can also be set by using
          <methodname>setData</methodname>() method after the
          instantiation.  If the data is already set, it is replaced.
<informalexample>
	  <programlisting>aDataFile.setData( DATA )</programlisting>
	</informalexample>


 </para>

      <para>Loading the &ECD; file is also straightforward.
<informalexample>
	  <programlisting>aDataFile = ecell.ECDDataFile()
aDataFile.load( 'datafile.ecd' )
DATA = aDataFile.getData()</programlisting>
	</informalexample>
The <methodname>getData</methodname>() method extracts the data from the <classname>ECDDataFile</classname> object as an &array;.
</para>

    </sect2>

    <sect2>
      <title>&ECD; header information</title>
      <para>In addition to the data itself, an &ECD; file can hold some information in its header.
<itemizedlist>
	  <listitem>
	    <para>Data name</para>
	    <para>The name of data.  Setting a <emphasis>FullPN</emphasis> may be a good idea.  Use <methodname>setDataName</methodname>( <parameter>name</parameter> ) and <methodname>getDataName</methodname>() methods to set and get this field.</para>
	  </listitem>
	  <listitem>
	    <para>Label</para> <para>This field is used to name axes
	      of the data. Use <methodname>setLabel</methodname>(
	      <parameter>labels</parameter> ) and
	      <methodname>getLabel</methodname>() methods.  These
	      methods takes and returns a
	      &Python; &tuple;,
	      and stored in the file as a space-separated list. The default value of this field is: <constant>( 't', 'value', 'avg', 'min', 'max' )</constant>.</para>
	  </listitem>
	  <listitem>
	    <para>Note</para> <para>This is a free-format field.
	      This can be a multi-line or a single-line string.  Use
	      <methodname>setNote</methodname>(
	      <parameter>note</parameter> ) and
	      <methodname>getNote</methodname>().</para>
	  </listitem>
	</itemizedlist>
</para>

      <para>The header information is stored in the file like this.
<programlisting>
#DATA:
#SIZE: 5 1010
#LABEL: t       value   avg     min     max
#NOTE:
#
#----------------------
0 0.1 0.1 0.1 0.1
...
</programlisting>
Each line of the header is headed by a sharp (#) character.  The
<constant>'#SIZE:'</constant> line is automatically set when saved to
show size of the data.  This field is ignored in loading.  The header
ends with <constant>'#----...'</constant>.
</para>

    </sect2>

    <sect2>
      <title>Using &ECD; outside &ecell; SE</title>

      <para>For most cases &NumericPython;
	will offer any necessary functionality for scientific data
	processing.  However, using some external software can enhance
	the usability.</para>

      <para>&ECD; files can be used as input to any
	software which supports white space-separated text format, and
	treats lines with heading sharps (#) as comments.</para>

      <para><productname>GNU gnuplot</productname> is a scientific
	presentation-quality plotting software with a sophisticated
	interactive command system.  To plot an &ECD;
	file from <productname>gnuplot</productname>, just use
	<command>plot</command> command. For example, this draws a
	time-value 2D-graph:
<informalexample>
	  <screen><prompt>gnuplot> </prompt><userinput>plot 'datafile.ecd' with lines</userinput>
</screen>
	</informalexample>
	    Use <command>using</command> modifier to specify which column to use for the plotting. The following example makes a time-average 2D-plot.
<informalexample>
	  <screen><prompt>gnuplot> </prompt><userinput>plot 'datafile.ecd' using 1:3 with lines</userinput>
</screen>
	</informalexample>
</para>
      <para>Another OpenSource software useful for data processing is GNU <productname>Octave</productname>.  Loading an &ECD; from <productname>Octave</productname> is also simplest.
<informalexample>
	  <screen><prompt>octave:1></prompt> <userinput>load datafile.ecd</userinput></screen>
	</informalexample>
Now the data is stored in a matrix variable with the same name as the file without the extension (<varname>datafile</varname>).
<informalexample>
	  <screen><prompt>octave:2> </prompt><userinput>mean(datafile)</userinput>
<computeroutput>ans =
 
   5.0663  51.7158  51.7158  51.2396  52.2386</computeroutput>
</screen>
	</informalexample>
</para>

    </sect2>

    <sect2>
      <title>Binary format</title>

      <para>Currently loading and saving of the binary file format is
	not supported.  However, <productname>Numeric
	Python</productname> has an efficient, platform-dependent way
	of exporting and importing &array; data.  See the
	<productname>Numeric Python</productname> manual.</para>
    </sect2>

  </sect1>


  <sect1>
    <title>Manipulating Model Files</title>

    <para>This section describes how to create, modify, and read &EML; files
     with the EML module of the &ecell;  &Python; library.</para>

    <sect2>
      <title>Importing &EML; module</title>

      <para>To import the &EML; module, just import
      <classname>ecell</classname> module.
<programlisting>import ecell</programlisting>
      And <classname>ecell.Eml</classname> class is made available.
</para>
    </sect2>


  </sect1>


  <sect1>
    <title>Other Methods</title>
    <sect2>
      <title>Getting version numbers</title>

      <para><methodname>getLibECSVersion</methodname>() method of
	<classname>ecell.ecs</classname> module gives the version of
	the C++ backend library
	(libecs) as a string. <methodname>getLibECSVersionInfo</methodname>()
	method of the module gives the version as a
	&Python; &tuple;.  The
	&tuple; contains three numbers in this order: (
	<parameter>MAJOR_VERSION</parameter>,
	<parameter>MINOR_VERSION</parameter>,
	<parameter>MICRO_VERSION</parameter> )</para>

      <informalexample>
	<screen><prompt>ecell3-session>>> </prompt><userinput>import ecell</userinput>
<prompt>ecell3-session>>> </prompt><userinput>ecell.ecs.getLibECSVersion()</userinput>
<computeroutput>'3.2.0'</computeroutput>
<prompt>ecell3-session>>> </prompt><userinput>ecell.ecs.getLibECSVersionInfo()</userinput>
<computeroutput>(3, 2, 0)</computeroutput>
</screen>
      </informalexample>

    </sect2>

    <sect2>
      <title>&DM; loading-related methods</title>

      <para>The search path of &DM; files can be
	specified and retrieved by using
	<methodname>setDMSearchPath</methodname>() and
	<methodname>getDMSearchPath</methodname>() methods.  These
	methods gets and returns a colon (:) separated list of
	directory names.  The search path can also be specified by
	using <envar>ECELL3_DM_PATH</envar> environment
	variable. See the previous section for more about
	&DM;search path.</para>

      <informalexample>
	<screen><prompt>ecell3-session>>> </prompt><userinput>import ecell</userinput>
<prompt>ecell3-session>>> </prompt><userinput>ecell.ecs.setDMSearchPath( '~/dm:~/test/dm' )</userinput>
<prompt>ecell3-session>>> </prompt><userinput>ecell.ecs.getDMSearchPath()</userinput>
<computeroutput>'~/dm:~/test/dm'</computeroutput>
</screen>
      </informalexample>

      <para>A list of built-in and already loaded
	&DM; classes can be gotten with
	<methodname>getDMInfo</methodname>() method of
	<classname>ecell.ecs.Simulator</classname> class.  The
	&Simulator; instance is available to
	&Session; as
	<varname>theSimulator</varname> variable.  The method returns
	a nested &Python; &tuple;
	in the form of ( ( TYPE1, CLASSNAME1, PATH1 ), ( TYPE2,
	CLASSNAME2, PATH2 ), ... ).  TYPE is one of
	<constant>'Process'</constant>,
	<constant>'Variable'</constant>,
	<constant>'System'</constant>, or
	<constant>'Stepper'</constant>.  CLASSNAME is the class name
	of the &DM;.  PATH is the directory from
	which the &DM; is loaded.  PATH is an empty
	string (<constant>''</constant>) if it is a built-in class.</para>

      <informalexample>
	<screen>
<prompt>ecell3-session>>> </prompt><userinput>theSimulator.getDMInfo()</userinput>
<computeroutput>(('Process', 'GillespieProcess', '/usr/lib/ecell/3.2/GillespieProcess.so'), 
('Stepper', 'DiscreteTimeStepper', ''), 
('Stepper', 'NRStepper', '/usr/lib/ecell/3.2/NRStepper.so'), ... )</computeroutput>
</screen>
      </informalexample>


    </sect2>
  </sect1>


  <sect1>
    <title>Advanced Topics</title>

    <sect2>
      <title>How &ecell3-session; runs</title>

      <para>&ecell3-session; command runs on
	&ecell3-python; interpreter command.
	&ecell3-python; command is a thin wrapper to the
	&Python; interpreter.
	&ecell3-python; command simply invokes a
	&Python; interpreter command
	specified at compile time.  Before executing
	&Python;, &ecell3-python;
	sets some environment variables to ensure that it can find
	necessary &ecell; &Python; extension
	modules and the Standard &DM; Library. 
	After processing the commandline options,
	&ecell3-session; command creates an
	<classname>ecell.ecs.Simulator</classname> object, and then
	instantiate a <classname>ecell.Session</classname> object for
	the simulator object.  </para>

      <para>Thus basically &ecell3-python; is just a
	&Python; interpreter, and frontend
	components of &ecell; SE run on this command.  To use
	the &ecell; Python Library from &ecell3-python;
	command, use <programlisting>import ecell</programlisting>
	statement from the prompt:
<informalexample>
	  <screen><prompt>$ </prompt><userinput>ecell3-python</userinput> 
<computeroutput>Python 2.2.2 (#1, Feb 24 2003, 19:13:11)
[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-4)] on linux2
Type "help", "copyright", "credits" or "license" for more information.</computeroutput>
<prompt>>>> </prompt><userinput>import ecell</userinput>
<prompt>>>> </prompt>
</screen>
	</informalexample>
or, (on UNIX-like systems) execute a file starting with:
<programlisting>#!/usr/bin/env ecell3-python
import ecell
[...]
</programlisting> 
	</para>


    </sect2>


    <sect2>
      <title>Getting information about execution environment</title>

      <para>To get the current configuration of
	&ecell3-python; command, invoke
	&ecell3-python; command with a
	<parameter>-h</parameter> option. This will print values of
	some variables as well as usage of the command.
<informalexample>
	  <screen><prompt>$ </prompt><userinput>ecell3-python -h</userinput>
<computeroutput>[...]

Configurations:
 
        PACKAGE         = ecell
        VERSION         = 3.2.0
        PYTHON          = /usr/bin/python
        PYTHONPATH      = /usr/lib/python2.2/site-packages:
        DEBUGGER        = gdb
        LD_LIBRARY_PATH = /usr/lib:
        prefix          = /usr
        pythondir       = /usr/lib/python2.2/site-packages
        ECELL3_DM_PATH  =

[...]
</computeroutput></screen>
	</informalexample>
The '<computeroutput>PYTHON =</computeroutput>' line gives the path of the
&Python; interpreter to be used.
</para>
    </sect2>

    <sect2>
      <title>Debugging</title>

      <para>To invoke &ecell3-python; command in debugging
	mode, set <envar>ECELL_DEBUG</envar> environment variable.
	This runs the command on a debugger software.  If found,
	<productname>GNU gdb</productname> is used as the
	debugger. <envar>ECELL_DEBUG</envar> can be used for any
	commands which run on &ecell3-python;, including
	&ecell3-session; and
	&gecell;.  For example, to run &ecell3-session; in debug mode on the shell prompt:
<informalexample>
	  <screen><prompt>$ </prompt><userinput>ECELL_DEBUG=1 ecell3-session -f foo.eml</userinput>
<computeroutput>gdb --command=/tmp/ecell3.0mlQyE /usr/bin/python
GNU gdb Red Hat Linux (5.3post-0.20021129.18rh)
Copyright 2003 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "i386-redhat-linux-gnu"...
[New Thread 1074178112 (LWP 7327)]
ecell3-session [ E-Cell SE Version 3.2.0, on Python Version 2.2.2 ]
Copyright (C) 1996-2003 Keio University.
Send feedback to Koichi Takahashi &lt;shafi@e-cell.org></computeroutput>
<prompt>&lt;foo.eml, t=0>>> </prompt><userinput><keycombo action='simul'>
		<keycap>Ctrl</keycap>
		<keycap>C</keycap>
	      </keycombo></userinput>
<computeroutput>Program received signal SIGINT, Interrupt.
[Switching to Thread 1074178112 (LWP 7327)]
0xffffe002 in ?? ()</computeroutput>
<prompt>(gdb)</prompt>
</screen>
	</informalexample>
It automatically runs the program with the commandline options with '<parameter>--command=</parameter>' option of <productname>gdb</productname>.  The <productname>gdb</productname> prompt appears when the program crashes or interrupted by the user by pressing <keycombo action='simul'>
	  <keycap>Ctrl</keycap>
	  <keycap>C</keycap>
	</keycombo>.
</para>

      <para><envar>ECELL_DEBUG</envar> runs
	<productname>gdb</productname>, which is operates at the level
	of C++ code.  For debugging of &Python; layer scripts, see
	&Python; Library Reference Manual for
	<productname>Python Debugger</productname>.</para>
    </sect2>


    <sect2>
      <title>Profiling</title>

      <para>It is possible to run &ecell3-python; command
	in profiling mode, if the operating system has
	<productname>GNU sprof</productname> command, and its C
	library supports <envar>LD_PROFILE</envar> environmental
	variable.  Currently it only supports per-shared object
	profiling. (See GNU C Library Reference Manual)</para>

      <para>To run &ecell3-python; in profiling mode, set
	<envar>ECELL_PROFILE</envar> environment variable to
	<emphasis>SONAME</emphasis> of the shared object.  SONAME of
	a shared object file can be found by using
	<productname>objdump</productname> command, with, for example,
	<parameter>-p</parameter> option.</para>

      <para>For example, the following commandline takes a
	performance profile of Libecs:
<informalexample>
	  <screen><prompt>$ </prompt><userinput>ECELL_PROFILE=libecs.so.2 ecell3-session [...]</userinput></screen>
	</informalexample>
        After running, it creates a profiling data file with a
        filename <filename>SONAME.profile</filename> in the
        <emphasis>current directory</emphasis>.  In this case, it is
        <filename>libecs.so.2.profile</filename>.  The binary
        profiling data can be converted to a text format by using
        <command>sprof</command> command. For example:
        <informalexample> <screen><prompt>$ </prompt><userinput>sprof -p libecs.so.2 libecs.so.2.profile</userinput></screen>
	</informalexample>
</para>


    </sect2>

  </sect1>



  <sect1>
    <title>&ecell; Python Library API</title>

    <para>This section provides a list of some commonly used 
      classes in &ecell; Python library and their APIs.
      </para>


    <sect2>
      <title>&Session; Class API</title>

      <para>Methods of &Session; class has
      the following five groups.</para>

      <itemizedlist>
	<listitem>
	  <para>Session methods</para>
	</listitem>
	<listitem>
	  <para>Simulation methods</para>
	</listitem>
	<listitem>
	  <para>Stepper methods</para>
	</listitem>
	<listitem>
	  <para>Entity methods</para>
	</listitem>
	<listitem>
	  <para>Logger methods</para>
	</listitem>
      </itemizedlist>


      &session-class-api;


    </sect2>

    <sect2>
      <title>&ObjectStub; Classes API</title>


      <para>There are three subclasses of &ObjectStub;
</para>
      <itemizedlist>
	<listitem>
	  <para>&EntityStub;</para>
	</listitem>
	<listitem>
	  <para>&StepperStub;</para>
	</listitem>
	<listitem>
	  <para>&LoggerStub;</para>
	</listitem>
      </itemizedlist>

      <para>Some methods are common to these subclasses.</para>




      &objectstubs-api;

    </sect2>

    <sect2>
      <title><classname>ECDDataFile</classname> Class API</title>
      <para><classname>ECDDataFile</classname> class has the following set of methods.</para>

      &ecddatafile-api;
    </sect2>


  </sect1>

  


</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("users-manual.xml" "book" "chapter")
End:
-->

