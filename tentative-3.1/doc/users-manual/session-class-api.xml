<?xml version="1.0" encoding="US-ASCII"?>

<table pgwide='1' tocentry='1' frame='bottom' rowsep='0'>
  <title>Methods and properties of <classname>Session</classname> class</title>
  
  <tgroup cols="2">
    <colspec colwidth='3*' colnum='1' colname='c1'/>
    <colspec colnum='2' colname='c2'/>
    <thead>
      <row rowsep='1'>
	<entry namest="c1" nameend='c1'><emphasis><classname>Session</classname> class methods</emphasis></entry>
      </row>

      <row>
	<entry>Synopsis</entry>
	<entry>Return</entry>
      </row>
      <row>
	<entry namest='c1' nameend='c2' align='left' rowsep='1'>Description</entry>	  </row>
    </thead>
    
    <tbody>
      
      <!-- ============== Session Methods ==================== -->
      <row>
	<entry namest='c1' nameend='c2' align='center' rowsep='1'><emphasis>Session methods</emphasis></entry>
      </row>



      <!-- loadModel -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>loadModel</methodname>( <parameter>file</parameter> )
</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>Load an EML file, and create a cell model as described in the file.
</para>

<para><parameter>file</parameter> can be either a filename or a file object.
</para>

            </entry>
      </row>

      <!-- loadScript -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>loadScript</methodname>( <parameter>filename</parameter> )
</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>Load a ESS file.  Usually this is not used in ESS.</para>

<para>FIXME: what happens then?  need to check if this can be called
recursively.
</para>

<para>FIXME: need to describe about the locals()</para>

            </entry>
      </row>



      <!-- message -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>message</methodname>( <parameter>message</parameter> )
</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>
      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>Output <parameter>message</parameter>.  By default the message is
printed to stdout.</para> 

<para>The way the message is handled can be changed by using
<methodname>setMessageMethod</methodname> method.  For example, GUI
frontend software may give a method to steal the message for
its message printing widget.</para></entry>
      </row>


      <!-- setLogMethod -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>setMessageMethod</methodname>( <parameter>method</parameter> )
</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>This method changes what happens when
<methodname>message</methodname> method is called.  
</para>

<para><parameter>method</parameter> must be a Python callable object
which takes just one string parameter.</para>

<para>See also: <methodname>message</methodname></para>
            </entry>
      </row>

      <!-- ============ Simulation Methods ================== -->

      <row>
	<entry namest='c1' nameend='c2' align='center' rowsep='1'>
<emphasis>Simulation methods</emphasis></entry>
      </row>

      <!-- getCurrentTime -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>getCurrentTime</methodname>()
</synopsis></entry>

	<entry>The current time as a <type>float</type></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>This method returns the current time of the simulator.</para>
            </entry>
      </row>


      <!-- getNextEvent -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>getNextEvent</methodname>()
</synopsis></entry>

	<entry>A Python 2-<type>tuple</type> ( <type>float</type>, <type>string</type> )</entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>This method returns the next scheduled event as a Python
2-<type>tuple</type> consisting of a scheduled time and a StepperID.
The event will be processed in the next time
whe <methodname>step</methodname>() or <methodname>run</methodname>() is
called.</para>

<para>The time is usually different from one that
<methodname>getCurrentTime</methodname>() returns.  This method
returns the scheduled time of the next event, while
<methodname>getCurrentTime</methodname>() returns the time of the last
event.  These methods can return the same number if more than one
events are scheduled at the same point in time.</para>

            </entry>
      </row>


      <!-- run -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>run</methodname>( <optional><parameter>sec</parameter></optional> )
</synopsis>
            </entry>

	<entry><constant>None</constant></entry>

      </row>
      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
	    <para>Run the simulation for <parameter>sec</parameter>
	    seconds.</para> 

            <para>When this method is called, the simulator internally
            calls <methodname>step</methodname>() method repeatedly
            until the equation
            <literal>t<subscript>current</subscript> >
            t<subscript>start</subscript> +
            <parameter>sec</parameter></literal> holds.  That means,
            the simulator stops immediately after the simulation step
            in which the time exceeds the specified point. The time
            can be far after the specified time point if all step
            sizes taken by <classname>Stepper</classname>s in the
            model are very long.
            </para>

            <para>If <emphasis>event checker</emphasis>
	    <emphasis>event handler</emphasis> object are set,
	    <parameter>sec</parameter> can be omitted.</para> <para>See also:
	    <methodname>setEventChecker</methodname> and
	    <methodname>setEventHandler</methodname></para></entry>
      </row>

      <!-- setEventChecker -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>setEventChecker</methodname>( <parameter>eventchecker</parameter> )
</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>If the <emphasis>event checker</emphasis> and an <emphasis>event
handler</emphasis> are correctly set, and the
<methodname>run</methodname> method is called with or without time
duration, the simulator checks if the <emphasis>event
checker</emphasis> returns true once in <varname>n</varname>
simulation steps , where <parameter>n</parameter> is a positive
integer number set by using
<methodname>setEventCheckInterval</methodname> (default
<parameter>n</parameter>= 20 steps).  If it happens, the simulator
then calls the <emphasis>event handler</emphasis>.  If the
<emphasis>event handler</emphasis> calls
<methodname>stop</methodname> method of
<classname>Session</classname>, the simulator stops before the next
step.  This is the only way to quit from the simulation loop when
<methodname>run</methodname> is called without an argument.</para>

<para>This mechanism is used to implement, mainly but not limited to,
GUI frontend components to the <classname>Session</classname> class.</para>

<para><parameter>event checker</parameter> and <parameter>event
handler</parameter> must be Python callable objects.
<parameter>event checker</parameter> must return an object which can be
evaluated as either <constant>true</constant> or
<constant>false</constant>.</para>

</entry>
      </row>


      <!-- setEventCheckInterval -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>setEventCheckInterval</methodname>( <parameter>n</parameter> )
</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>See <methodname>setEventChecker</methodname>.</para>
<para>This method is NOT IMPLEMENTED YET.</para>
</entry>
      </row>

      <!-- setEventHandler -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>setEventHandler</methodname>( <parameter>eventhandler</parameter> )
</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>See <methodname>setEventChacker</methodname></para>
            </entry>
      </row>



      <!-- step -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>step</methodname>( <optional><parameter>numsteps</parameter></optional> )
</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>Perform a step of the simulation.  If the optional integer
<parameter>numsteps</parameter> parameter is given, the simulator
steps that number. If it is omitted, it steps just once.</para>
            </entry>
      </row>


      <!-- stop -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>stop</methodname>()</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>Stop the simulation.  Usually this is called from the
<emphasis>event handler</emphasis>, or other methods called by the
<emphasis>event handler.</emphasis></para>
<para>See also: <methodname>setEventChacker</methodname>,
<methodname>setEventHandler</methodname></para>
            </entry>
      </row>


      <!-- initialize -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>initialize</methodname>()</synopsis></entry>

	<entry><constant>None</constant></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>Do preparation of the simulation.  Usually there is no need to call
this method because this is automatically called before executing
<methodname>step</methodname> and <methodname>run</methodname>.</para>
            </entry>
      </row>

      <!-- ============== Stepper methods ==================== -->
      <row>
	<entry namest='c1' nameend='c2' align='center' rowsep='1'><emphasis>Stepper methods</emphasis></entry>
      </row>

      <!-- getStepperList -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>getStepperList</methodname>()</synopsis></entry>

	<entry>A Python <type>tuple</type> of ID strings.</entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>This method returns a Python <type>tuple</type> which contains
ID strings of <classname>Stepper</classname>
objects in the simulator.</para>
            </entry>
      </row>

      <!-- createStepperStub -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>createStepperStub</methodname>( <parameter>id</parameter> )</synopsis></entry>

	<entry>A new <classname>StepperStub</classname> object</entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>This method returns a <classname>StepperStub</classname> object
bound to this <classname>Session</classname> object and the given
<parameter>id</parameter>.</para>
            </entry>
      </row>



      <!-- ============== Entity methods ==================== -->
      <row>
	<entry namest='c1' nameend='c2' align='center' rowsep='1'><emphasis>Entity methods</emphasis></entry>
      </row>

      <!-- getEntityList -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>getEntityList</methodname>( <parameter>entitytype</parameter>, <parameter>systempath</parameter> )</synopsis></entry>

	<entry>A Python <type>tuple</type> of <classname>FullID</classname> strings.</entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>This method returns a Python <type>tuple</type> which contains
<classname>FullID</classname> strings of <classname>Entity</classname>
objects of <parameter>entitytype</parameter> existing in the
<classname>System</classname> pointed by
the <parameter>systempath</parameter> argument</para>

<para><parameter>entitytype</parameter> must be one of
<constant>VARIABLE</constant>, <constant>PROCESS</constant>, or
<constant>SYSTEM</constant> defined in ecell.ECS module.
<parameter>systempath</parameter> must be a valid
<emphasis>SystemPath</emphasis> string.</para>
            </entry>
      </row>

      <!-- createEntityStub -->
      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>createEntityStub</methodname>( <parameter>fullid</parameter> )</synopsis></entry>

	<entry>A new <classname>EntityStub</classname> object</entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>This method returns an <classname>EntityStub</classname> object bound to this <classname>Session</classname> object and the given <parameter>fullid</parameter>.</para>
            </entry>
      </row>


      <!-- ============== Logger methods ==================== -->
      <row>
	<entry namest='c1' nameend='c2' align='center' rowsep='1'><emphasis>Logger methods</emphasis></entry>
      </row>

      <!-- createLoggerList -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>getLoggerList</methodname>()</synopsis></entry>

	<entry>A Python <type>tuple</type> of 
<classname>FullPN</classname> strings.</entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>This method returns a Python <type>tuple</type> which contains
<classname>FullPN</classname> strings of all the
<classname>Logger</classname> objects in the
simulator.</para>
            </entry>
      </row>

      <!-- createLoggerStub -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<synopsis><methodname>createLoggerStub</methodname>( <parameter>fullpn</parameter> )</synopsis></entry>

	<entry>A new <classname>LoggerStub</classname> object</entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para>This method returns a <classname>LoggerStub</classname> object
bound to this <classname>Session</classname> object and the given
<parameter>fullpn</parameter>.</para>

<para><parameter>fullpn</parameter> must be a valid
<classname>FullPN</classname> string.</para>
            </entry>
      </row>

    </tbody>

  </tgroup>


  <!-- ============== Properties ==================== -->


  <tgroup cols="3">
    <colspec colnum='1' colname='c1'/>
    <colspec colnum='2' colname='c1'/>
    <colspec colnum='3' colname='c2'/>
    <thead>
      <row>
	<entry namest="c1" nameend='c2'><classname>Session</classname> class properties</entry>
      </row>

      <row>
	<entry>Name</entry>
	<entry>Type</entry>
      </row>
      <row>
	<entry namest='c1' nameend='c2' align='left' rowsep='1'>Description</entry>	  </row>
    </thead>
    
    <tbody>

      <!-- theSimulator -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<varname>theSimulator</varname>
</entry>

	<entry><classname>Simulator</classname></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para><varname>theSimulator</varname> variable holds this <classname>Session</classname>'s <classname>Simulator</classname> object.  
</para>

<para>Usually ESS users should rarely have need to get into details of
the <classname>Simulator</classname> class because almost all
simulation jobs can be done with the <classname>Session</classname>
API and the <classname>ObjectStub</classname> classes, which were in fact
developed to make it easier by providing a simple and consistent
object-oriented appearance to the lower level flat
<classname>Simulator</classname> API.  For the details of
<classname>Simulator</classname> class, consult <emphasis>&ecell; C++
library reference manual</emphasis> and the sourcecode of the system,
especially
<filename>ecell3/ecell/libemc/Simulator.hpp</filename>.</para>

            </entry>
      </row>

      <!-- theMainWindow -->

      <row>
	<entry namest='c1' nameend='c1' align='left'>
<varname>theMainWindow</varname>
</entry>

    <entry><classname>MainWindow</classname></entry>
      </row>

      <row>
	<entry namest="c1" nameend='c2' rowsep='1'>
<para><varname>theMainWindow</varname> variable may exist when the
<classname>Session</classname> is executed within <application>Osogo
Session Monitor</application>.  This variable is optional, and it
should be checked if this exists before using.
</para>

            </entry>
      </row>


    </tbody>

  </tgroup>
</table>


<!--
Local Variables:
mode: sgml
sgml-parent-document: ("writing-ecs.xml" "sect2" "table")
End:
-->
