<?xml version="1.0" encoding="UTF-8" ?>
<package>
  <job>
    <reference object="Scripting.FileSystemObject" />
    <object id="FileSystemObject" progid="Scripting.FileSystemObject" />
    <object id="WshShell" progid="WScript.Shell" />
    <script language="JScript" src="buildhelper.js" />
    <script language="JScript"><![CDATA[
var buildInfo = {
    debugBuild: false
};

(function() {
    var args = new BuildHelper.ArgsParser(
        [
            {
                short: 'g',
                receiver: function() {
                    buildInfo.debugBuild = true;
                }
            }
        ]).parse(WScript.Arguments);

    buildInfo = buildInfo.mix(
        {
            vcOutDir:   args.real_args[0],
            projectDir: args.real_args[1],
            distDir:    args.real_args[2],
            pythonHome: WshShell.Environment("Process")("PYTHONHOME")
        }.map(WrapIDispatchMethod(FileSystemObject, 'GetAbsolutePathName(path)'))
    );
}).call();
]]></script>
    <script language="JScript" src="info.js" />
    <script language="JScript"><![CDATA[
var tasks = {
    installECS: function() {
        var ecsDir = this.projectDir + 'ecell\\libecs\\';
        var destDir;

        destDir = this.distIncludeEcellDir + 'libecs\\';
        BuildHelper.mkdir(destDir);
        BuildHelper.copy(ecsDir + '*.hpp', destDir);
        BuildHelper.copy(ecsDir + '*.h', destDir);

        BuildHelper.mkdir(this.distLibDir);
        BuildHelper.copy(this.vcOutDir + 'ecs.lib', this.distLibDir);

        BuildHelper.mkdir(this.distBinDir);
        BuildHelper.copy(this.vcOutDir + 'ecs.dll', this.distBinDir);
    },

    installPyECS: function() {
        var pyECSDir = this.projectDir + 'ecell\\pyecs\\';
        BuildHelper.chdir(pyECSDir);
        this.execPythonScript([
                'setup.py',
                'build',
                '-b', this.vcOutDir + 'pyecs.build'
            ].concat(this.debugBuild ? [ '-g' ]: []).concat([
                'install',
                '--prefix', '\\',
                '--root', this.distDir
            ]));
    },

    installPyECell: function() {
        var pyECellDir = this.projectDir + 'ecell\\pyecell\\';
        var destDir = this.distBinDir;
        var pyECellDirScripts = [
            'ecell3-em2eml',
            'ecell3-eml2em',
            'ecell3-session',
            'ecell3-session-manager',
            'ecell3-eml2sbml',
            'ecell3-sbml2eml'
        ];
        BuildHelper.copyMultiple(
            pyECellDir, destDir, pyECellDirScripts);
        var self = this;
        pyECellDirScripts.apply(function(fname) {
                self.makePythonLauncher(destDir + '\\' + fname);
            });
        BuildHelper.chdir(pyECellDir);
        this.execPythonScript(
            [
                'setup.py',
                'build',
                '-b', this.vcOutDir + 'pyecell.build'
            ].concat(this.debugBuild ? [ '-g' ]: []).concat([
                'install',
                '--prefix', '\\',
                '--root', this.distDir
            ]));
    },

    installDMObjects: function() {
        var dmObjectsDir = this.projectDir + 'ecell\\dm\\';
        var destDir;

        destDir = this.distLibEcellDir + 'dms\\';
        BuildHelper.mkdir(destDir);
        BuildHelper.copy(this.vcOutDir + 'dm\\*.dll', destDir);
        BuildHelper.copy(dmObjectsDir + '*.desc', destDir);
    },

    installEMC: function() {
        var emcDir = this.projectDir + 'ecell\\libemc\\';
        var destDir;

        destDir = this.distIncludeEcellDir + 'libemc\\';
        BuildHelper.mkdir(destDir);
        BuildHelper.copy(emcDir + '*.hpp', destDir);

        BuildHelper.mkdir(this.distLibDir);
        BuildHelper.copy(this.vcOutDir + 'emc.lib', this.distLibDir);

        BuildHelper.mkdir(this.distBinDir);
        BuildHelper.copy(this.vcOutDir + 'emc.dll', this.distBinDir);
    },

    installDMTool: function() {
        var dmToolDir = this.projectDir + 'dmtool\\';
        var destDir = this.distIncludeDir + 'dmtool\\';

        BuildHelper.mkdir(destDir);
        BuildHelper.copy(dmToolDir + '*.hpp', destDir);
    },

    installSessionMonitor: function() {
        var destDir;
        var sessionMonitorDir = this.projectDir + 'ecell\\session-monitor\\';
        var distSessionMonitorDir = this.distLibDir + 'ecell-3.1\\session-monitor\\';
        var executableScripts = [ 'ecell3-session-monitor' ];

        destDir = this.distBinDir;
        BuildHelper.mkdir(destDir);
        BuildHelper.copyMultiple(
                sessionMonitorDir, destDir, executableScripts);
        var self = this;
        executableScripts.apply(function(fname) {
                self.makePythonLauncher(destDir + '\\' + fname, 'pythonw', 1);
            });

        destDir = distSessionMonitorDir;
        BuildHelper.mkdir(destDir);
        BuildHelper.copyMultiple(
            sessionMonitorDir, destDir,
            ['*.glade', '*.png', '*.py', '*.ini']);

        destDir = distSessionMonitorDir + 'plugins\\';
        BuildHelper.mkdir(destDir);
        BuildHelper.copyMultiple(
            sessionMonitorDir + 'plugins\\', destDir,
            ['*.glade', '*.xpm', '*.py']);
    },

    installModelEditor: function() {
        var destDir;
        var modelEditorDir = this.projectDir + 'ecell\\model-editor\\';
        var distModelEditorDir = this.distLibDir + 'ecell-3.1\\model-editor\\';
        var executableScripts = [ 'ecell3-model-editor' ];

        destDir = this.distBinDir;
        BuildHelper.mkdir(destDir);
        BuildHelper.copyMultiple(
            modelEditorDir, destDir, executableScripts);
        var self = this;
        executableScripts.apply(function(fname) {
                self.makePythonLauncher(destDir + '\\' + fname, 'python', 2);
            });

        destDir = distModelEditorDir;
        BuildHelper.mkdir(destDir);
        BuildHelper.copyMultiple(
            modelEditorDir, destDir,
            ['*.py', '*.ini']);

        destDir = distModelEditorDir + 'glade\\';
        BuildHelper.mkdir(destDir);
        BuildHelper.copyMultiple(
            modelEditorDir + 'glade\\', destDir,
            ['*.glade', '*.png']);

        destDir = distModelEditorDir + 'plugins\\'
        BuildHelper.mkdir(destDir);
        BuildHelper.copyMultiple(
            modelEditorDir + 'plugins\\', destDir,
            ['*.png', '*.py']);
    },

    installDoc: function() {
        var docDir = this.projectDir + 'doc\\';
        var destDir;

        destDir = this.distDocDir;
        BuildHelper.mkdir(destDir);
        BuildHelper.copyMultiple(
            this.projectDir, destDir,
            [
                'README', 'AUTHORS', 'COPYING',
                'COPYING.GPLv2', 'COPYING.GPLv3',
                'COPYING.LGPLv2', 'COPYING.LGPLv3',
                'INSTALL', 'NEWS', 'README', 'ChangeLog'
            ]);

        destDir = this.distDocDir+ 'samples\\';
        BuildHelper.mkdir(destDir);
        BuildHelper.copyRecursively(
            docDir + 'samples\\', destDir,
            [
                '*.cpp', '*.em', '*.ecd', '*.py', '*.txt',
                'README'
            ],
            [ '.svn' ]);
    },

    install: function() {
        this.installECS();
        this.installEMC();
        this.installDMTool();
        this.installDMObjects();
        this.installPyECS();
        this.installPyECell();
        this.installModelEditor();
        this.installSessionMonitor();
        this.installDoc();
    }
};

WScript.Quit(new BuildHelper(buildInfo).run(tasks, 'install'));

]]></script>
  </job>
</package>
