
  <chapter id="ecell3-stddmlib"> 
  <title>Standard Dynamic Module Library</title> 
  <highlights>
    <para>This chapter overviews:</para>
    <simplelist>
      <member>An incomplete list of classes available as the Standard
      Dynamic Module Library, and,</member> 
      <member>Some usage the classes in the Standard Dynamic Module Library.</member>
    </simplelist>
  </highlights>

    <para>This chapter briefly describes the Standard Dynamic Module Library
    distributed with &app;.  If the system is installed correctly, the
    classes provided by the library can be used without any special
    procedure.</para>

  <para>This chapter is not meant to be a complete reference.  To know
  more about the classes defined in the library, see the E-Cell3
  Standard Dynamic Module Library Reference Manual (under preparation).</para>

  <sect1>
    <title>Steppers</title>

    <para>There are three direct sub-classes of &Stepper;:
<simplelist>
	<member><classname>DifferentialStepper</classname></member>
	<member><classname>DiscreteEventStepper</classname></member>
	<member><classname>DiscreteTimeStepper</classname></member>
      </simplelist>
</para>
    
    <sect2>
      <title>DifferentialSteppers</title>

      <sect3>
	<title>General-purpose DifferentialStepper classes</title>

      <para>The following &Stepper; classes implement general-purpose
ordinary differential equation solvers.   Basically these classes must
work well with any simple continuous &Process; classes.</para>

	<itemizedlist>
	  <listitem>
	    <para><classname>ODE45Stepper</classname></para>
	    <para>This &Stepper; implements
	    Dormand-Prince 5(4)7M algorithm for ODE systems.</para>
	    <para>In most cases this &Stepper; is
	    the best general purpose solver for ODE models.</para>
	  </listitem>
	  <listitem>
	    <para><classname>ODE23Stepper</classname></para>
	    <para>This &Stepper; implements
	    Fehlberg 2(3) algorithm for ODE systems.</para> 

	    <para>Try this &Stepper; if other
	    part of the model has smaller timescales.  This
	    &Stepper; can be used for a
	    moderately stiff systems of differential equations.</para>
	  </listitem>
	  <listitem>
	    <para><classname>FixedODE1Stepper</classname></para>
	    <para>A <classname>DifferentialStepper</classname> without
	    adaptive stepsizing mechanism.  The solution of this
	    &Stepper; is first order.</para>

	    <para>This stepper calls
	    <methodname>process</methodname>() method of each
	    &Process; just once in a single
	    step.</para>
	    <para>Although this
	    &Stepper; is not suitable for high-accuracy solution of smooth
	    continuous systems of differential equations, its simplicity
	    of the algorithm is sometimes useful.</para>
	  </listitem>
	</itemizedlist>

      </sect3>

      <sect3>
	<title>S-System and GMA Steppers</title>

	<para>FIXME: need description here.</para>
      </sect3>

    </sect2>

    <sect2>
      <title>DiscreteEventSteppers</title>
      <para>

<itemizedlist>
	  <listitem>
	    <para>DiscreteEventStepper</para> 

	    <para>This &Stepper; is used to conduct discrete event
	    simulations.  This &Stepper; should be used in combination
	    with subclasses of
	    <classname>DiscreteEventProcess</classname>.</para>

            <para>This &Stepper; uses its &Process; objects as event
	    generators.  The procedure of this &Stepper; for
	    <methodname>initialize</methodname>() method is like this:

<orderedlist>
		<listitem>
		  <para><methodname>updateStepInterval</methodname>() method of
  	    its all <classname>DiscreteEventProcess</classname>
	    objects.</para>
		</listitem>

		<listitem>
		  <para>Find a &Process; with the least <emphasis>scheduled
	    time</emphasis> (top process).  The scheduled time is
	    calculated as: ( current time ) + (
	    <property>StepInterval</property> of the process ).</para>
		</listitem>

		<listitem>
		  <para>Reschedule itself to the scheduled time of the
		  top process.</para>
		</listitem>
	      </orderedlist>

            <methodname>step</methodname>() method of this &Stepper; is as
             follows:

<orderedlist>
		<listitem>
		  <para>Call <methodname>process</methodname>() method
 	         of the current top process.</para>
		</listitem>

		<listitem>
		  <para>Calls
	    <methodname>updateStepInterval</methodname>() method of
	    the top process and all <emphasis>dependent
	    processes</emphasis> of the top process, and update
	    scheduled times for those processes to find the new top
	    process.</para>
		</listitem>

		<listitem>
		  <para>Lastly the &Stepper; reschedule itself to the
	          scheduled time of the new top process.</para>
		</listitem>
	      </orderedlist>

            The procedure for <methodname>interrupt</methodname>()
            method of this class is the same as that for
            <methodname>initialize</methodname>().
             

FIXME: need to explain about TimeScale property.

	    </para>

	  </listitem>

	  <listitem>
	    <para>NRStepper</para> 

	    <para>This is an alias to the
	    <classname>DiscreteEventStepper</classname>.
            This class can be used as an implementation of
	    Gillespie-Gibson algorithm.</para>

	    <para>To conduct the Gillespie-Gibson simulation, use 
             this class of &Stepper; in combination with
	    <classname>GillespieProcess</classname> class.   
            <classname>GillespieProcess</classname> is a subclass of
            <classname>DiscreteEventProcess</classname>.</para>
	  </listitem>
	</itemizedlist>
</para>
    </sect2>

    <sect2>
      <title>DiscreteTimeStepper</title>

      <para>
<itemizedlist>
	  <listitem>
	    <para>DiscreteTimeStepper</para>

	    <para>This &Stepper; steps with a fixed interval.  For
             example, <property>StepInterval</property> property of
             this &Stepper; is set to <literal>0.1</literal>, this
             &Stepper; steps every 0.1 seconds.</para>

	    <para>When this &Stepper; steps, it calls
             <methodname>process</methodname>() of all of its
             &Process; instances.  To change this behavior, create a
             subclass.</para>

	    <para>This &Stepper; ignores incoming interruptions from 
             other &Stepper;s.</para>

	  </listitem>
	</itemizedlist>
</para>

    </sect2>

    <sect2>
      <title>PassiveStepper</title>

      <para>
<itemizedlist>
	  <listitem>
	    <para>PassiveStepper</para>

	    <para>This &Stepper; never steps spontaneously (step
             interval = infinity).  Instead, this &Stepper; steps upon
             interruption.  In other words, this &Stepper; steps
             everytime immediately after a dependent &Stepper; steps.</para>

	    <para>When this &Stepper; steps, it calls
             <methodname>process</methodname>() of all of its
             &Process; instances.  To change this behavior, create a
             subclass.</para>

	  </listitem>
	</itemizedlist>
</para>

    </sect2>

  </sect1>


  <sect1>
    <title>Process classes</title>

    <sect2>
      <title>Continuous Process classes</title>

      <sect3>
	<title>Differential equation-based Process classes</title>

	<para>The following &Process; classes are straightforward
	implementations of differential equations, and can be used
	with the general-purpose
	<classname>DifferentialSteppers</classname> such as
	<classname>ODE45Stepper</classname>,
	<classname>ODE23Stepper</classname>, and
	<classname>FixedODE1Stepper</classname>.</para>

	<para>In the current version, most of the classes represent
certain reaction rate equations.  Of course it is not limited to
chemical and biochemical simulations.</para>

	<itemizedlist>
	<listitem>
	  <para><classname>CatalyzedMassActionFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>DecayFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>IsoUniUniFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>MassActionProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>MichaelisUniUniProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>MichaelisUniUniReversibleProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>OrderedBiBiFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>OrderedBiUniFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>OrderedUniBiFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>PingPongBiBiFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>RandomBiBiFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>RandomBiUniFluxProcess</classname></para>
	</listitem>
	<listitem>
	  <para><classname>RandomUniBiFluxProcess</classname></para>
	</listitem>
	</itemizedlist>

      </sect3>

      <sect3>
	<title>Other continuous Process classes</title>

	<itemizedlist>

	  <listitem>
	    <para><classname>PythonFluxProcess</classname></para>
	  </listitem>
	  <listitem>
	    <para><classname>SSystemProcess</classname></para>
	  </listitem>
	</itemizedlist>

      </sect3>

    </sect2>

    <sect2>
      <title>Discrete Process classes</title>

      <itemizedlist>
	<listitem>
	  <para><classname>GammaProcess</classname></para>
	  <para>Under development.</para>
	</listitem>
	<listitem>
	  <para><classname>GillespieProcess</classname></para>
	  <para>This &Process; must be used with a Gillespie-type &Stepper;,
such as <classname>NRStepper</classname>.</para>
	</listitem>
	<listitem>
	  <para><classname>RapidEquilibriumProcess</classname></para>
	</listitem>
      </itemizedlist>

    </sect2>


    <sect2>
      <title>Other Process classes</title>


	<itemizedlist>
	  <listitem>
	    <para><classname>PythonProcess</classname></para>
	  </listitem>
	</itemizedlist>

    </sect2>
  </sect1>


  <sect1>
    <title>Variable classes</title>
    <para>
</para>


    <itemizedlist>
      <listitem>
	<para>Variable</para>
	<para>A standard class to represent a state variable.</para>
      </listitem>

    </itemizedlist>
  </sect1>

  </chapter>



<!--
Local Variables:
mode: sgml
sgml-parent-document: ("users-manual.xml" "book" "chapter")
End:
-->
