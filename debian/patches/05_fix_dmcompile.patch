From 17239d8bc39bc029327ea4901378c3a34b1c165c Mon Sep 17 00:00:00 2001
From: Moriyoshi Koizumi <mozo@mozo.jp>
Date: Fri, 1 Jun 2012 16:36:00 +0900
Subject: [PATCH] Support long options in --option-with-argument.

---
 dmtool/dmcompile.in |   23 +++++++++++++++++------
 1 file changed, 17 insertions(+), 6 deletions(-)

diff --git a/dmtool/dmcompile.in b/dmtool/dmcompile.in
index 3b0b0af..f4c29bc 100644
--- a/dmtool/dmcompile.in
+++ b/dmtool/dmcompile.in
@@ -100,15 +100,26 @@ class CustomizedOptionParser( OptionParser ):
 
     def _process_long_opt(self, rargs, values):
         arg = rargs[ 0 ]
-        argname, _, _ = arg.partition( '=' )
-        try:
-            OptionParser._process_long_opt( self, rargs, values )
-        except BadOptionError:
+        argname, sep, _ = arg.partition( '=' )
+        if values.option_with_argument is not None and \
+           argname in values.option_with_argument:
             sys.stderr.write( 
-                "%s: unknown option '%s'; passing it through to the compiler\n" % ( self.get_prog_name(), argname ) )
+                "%s: does not handle option '%s' that takes an argument; passing it through to the compiler\n" % ( self.get_prog_name(), arg ) )
             if values.unknown is None:
                 values.unknown = []
-            values.unknown.append( arg )
+            if not sep:
+                values.unknown += [ rargs.pop( 0 ), rargs.pop( 0 ) ]
+            else:
+                values.unknown.append( rargs.pop( 0 ) )
+        else:
+            try:
+                OptionParser._process_long_opt( self, rargs, values )
+            except BadOptionError:
+                sys.stderr.write( 
+                    "%s: unknown option '%s'; passing it through to the compiler\n" % ( self.get_prog_name(), argname ) )
+                if values.unknown is None:
+                    values.unknown = []
+                values.unknown.append( arg )
 
     def _process_short_opts(self, rargs, values):
         arg = rargs[ 0 ]
-- 
1.7.10

