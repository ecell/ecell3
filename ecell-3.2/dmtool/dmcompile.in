#!/usr/bin/env python

# usage: dmcompile cfile [[cflags]... ]

import sys
import os
import glob
import getopt
from distutils.sysconfig import get_config_var
from distutils.ccompiler import new_compiler
from distutils.errors import CompileError, LinkError
from distutils.util import split_quoted

# prefix='@prefix@'
# exec_prefix='@exec_prefix@'
# libdir='@libdir@'
ORIG_CXXFLAGS = '@CXXFLAGS@'
ORIG_CPPFLAGS = '@CPPFLAGS@'
ORIG_LDFLAGS = '@LDFLAGS@'
SHLEXT = os.popen('echo @LTDL_SHLIB_EXT@').readline().rstrip()
CXXSUFFIX = '.cpp'
CXXFLAGS = os.environ.get('CXXFLAGS','')
CPPFLAGS = os.environ.get('CPPFLAGS','')
LDFLAGS =  os.environ.get('LDFLAGS','')

progname = os.path.basename( sys.argv[0] )

def help():
    global progname
    print '''
%(progname)s -- Compile dynamic modules for E-Cell Simulation Environment Version 3

Usage:
       %(progname)s [-v|--verbose] [-o file|--output=file] <compiler / linker options> source.cpp
       %(progname)s [-h|--help]

Acceptable compiler / linker options:
       -g
       -W[warning options]
       -f[compiler-specific-option]
       -m[architecture-specific-option]
       -O[optimizatin-option] 
       -Dname=value
       -Iincludedir
       -Llibdir
       -llib
    ''' % dict( progname = progname )

def msg( outstr ):
    global progname
    print "%s: %s" % ( progname, outstr )

def main():
    global ORIG_CXXFLAGS, ORIG_CPPFLAGS, ORIG_LDFLAGS, SHLEXT, \
           CXXSUFFIX, CXXFLAGS, CPPFLAGS, LDFLAGS
    opts , args = getopt.gnu_getopt( sys.argv[1:], "hvI:L:l:o:D:f:m:O:W:g", ["help", "verbose", "output=" ])
  
    include_dirs = []
    library_dirs = []
    libs = []
    macros = []
    out = None
    verbose = False

    for anOption, anArg in opts:
        # print help message
        if anOption in ( '-h', '--help' ):
            help()
            return 0
        elif anOption in ( '-v', '--verbose'):
            verbose = True
        elif anOption in ( '-f', '-m', '-g', '-O', '-W' ):
            CXXFLAGS += ' ' + anOption + anArg
        elif anOption == '-I':
            include_dirs.append( anArg )
        elif anOption == '-D':
            macros.append( anArg.split('=') )
        elif anOption == '-L':
            library_dirs.append( anArg )
        elif anOption == '-l':
            libs.append( anArg )
        elif anOption in ( '-o', '--output' ):
            out = anArg


    # check if source file is given
    if len( args ) < 1:
        help()
        msg( "no source file was given." )
        return 255 

    if out == None:
        if len( args ) == 1:
            out, dummy  = os.path.splitext( args[ 0 ] )
            out += SHLEXT
        else:
            msg( "specify the output filename." )
            return 255 
    else:
        path_without_ext, ext = os.path.splitext( out )
        if ext == '':
            out = path_without_ext + SHLEXT

    # compiler: use env + autoconf + plus anything that was given on the cmd line (?) -- FIXME
    cxxflags = split_quoted( ORIG_CXXFLAGS ) + \
        split_quoted( CXXFLAGS )
    cppflags = split_quoted( ORIG_CPPFLAGS ) + \
        split_quoted( CPPFLAGS )
    # linker: use env + autoconf (?) -- FIXME
    ldflags = split_quoted( ORIG_LDFLAGS ) + \
        split_quoted( LDFLAGS )

    shlflags = split_quoted( get_config_var('CCSHARED') )

    compiler = new_compiler( verbose = verbose )
    if verbose:
        old_spawn = compiler.spawn
        def new_spawn( self, cmd ):
            print ' '.join( cmd )
            old_spawn( cmd )
        compiler.__class__.spawn = new_spawn
    map( compiler.add_include_dir, include_dirs )
    map( compiler.add_library_dir, library_dirs )
    map( compiler.add_library, libs )
    map( lambda args: compiler.define_macro( *args ), macros )

    objects = None
    try:
        objects = compiler.compile( args, extra_preargs = shlflags + cxxflags + cppflags )
    except CompileError, e:
        msg( "failed to compile the specified source files: " + repr( e ) )
        return 1 

    if sys.platform == 'darwin':
        compiler.linker_so = [ arg for arg in compiler.linker_so if arg != '-shard' ]

    dlflags = []
    dlflags.extend(
        split_quoted(
            get_config_var( 'LDSHARED' ).replace(
                get_config_var( 'LINKCC' ), '' ).replace(
                    get_config_var( 'LDFLAGS' ), '' ) ) )

    try:
        try:
            compiler.link( output_filename = out,
                    target_desc = compiler.SHARED_OBJECT,
                    objects = objects,
                    extra_preargs = ldflags + dlflags,
                    target_lang = 'c++' )
        except LinkError, e:
            msg( "failed to link the object files: " + repr( e ) )
            return 1 
    finally:
        map( os.unlink, objects )

if __name__ == '__main__':
    sys.exit( main() )

