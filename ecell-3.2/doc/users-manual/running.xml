  <!-- =========== Getting Started ============================== -->
  <!-- Use the Getting Started section to describe the steps required
  to start the application and to describe the user interface components
  of the application. If there is other information that it is important
  for readers to know before they start using the application, you should
  also include this information here. 
  If the information about how to get started is very short, you can 
  include it in the Introduction and omit this section. -->

  <chapter id="ecell3-getting-started"> 
  <title>Getting Started</title> 

  <highlights>
    <para>By reading this chapter, you can get information about the following 
items.
</para>

    <simplelist>
      <member>What types of files are needed to run the simulator.</member>
      <member>How to prepare the files needed to run the simulator.</member>
      <member>How to run the simulation with &app;.</member>
    </simplelist>

  </highlights>

  <sect1 id="prepare-simulation"> 
    <title>Preparing Simulation</title> 
    
    <para> To start the simulation, you need to have these types of files:
      <itemizedlist>
	<listitem>
	  <para>A model file in EML format.</para>
	</listitem>
	<listitem>
	  <para>
              (optionally) shared object files (.so in
              Linux operating system), if you are using special classes
              of object in the model file which is not provided by the system
              by default.
             </para>
	</listitem>
	<listitem>
	  <para>
              (optionally) a script file (&ecell; Session Script, or
              &ESS;) to automate the simulation session.
             </para>
	</listitem>
      </itemizedlist>

    </para>

    <sect2>
      <title>Converting EM to EML</title>

      <para>Simulation models for &ecell; is often written in &EM; format.
        To convert &EM; (.em) files to &EML; (.eml) files, type the
        following command.
      </para>
      <para><command>ecell3-em2eml</command> <replaceable>filename.em</replaceable></para>

    </sect2>

    <sect2>
      <title>Compiling C++ Dynamic Modules</title>

      <para>If may have your own classes (Dynamic Modules, or &DM;)
defined for the simulation model in form of C++ source code files.
Those files must be compiled before using.</para>

      <para>Use <command>ecell3-dmc</command> command as the DM
      compiler.</para>

      <para><command>ecell3-dmc</command> <option>[options]</option>
<replaceable>filename.cpp</replaceable> <option>[compiler options]</option></para>

      <para>The arguments given before the file name (<option>[command
      options]</option> are interpreted as options to the
      <command>ecell3-dmc</command> command itself.</para>

      <para>The arguments after the file name are passed to a backend
      compiler (such as g++) as-is.  The backend compiler used is the
      same as that used to build the system itself.</para>

      <para>To inspect what the command actually does inside, enable
      verbose mode by specifying <option>-v</option> option.</para>

      <para>To get a full list of available
      <command>ecell3-dmc</command> options, invoke the command with
      <option>-h</option> option, and without the input file.  Here is
the help message gotten by <command>ecedll3-dmc</command> <option>-h</option>.

<literallayout class="monospaced">
Compile dynamic modules for E-Cell Simulation Environment Versin 3.

Usage:
        ecell3-dmc [ ecell3-dmc options ] sourcefile [ compiler options ]
        ecell3-dmc -h|--help

ecell3-dmc options:
        --no-stdinclude          Don't set standard include file path.
        --no-stdlibdir           Don't set standard include file path.
        --ldflags=[ldflags]      Specify options to the linker.
        --cxxflags=[cxxflags]    Override the default compiler options.
        --dmcompile=[path]       Specify dmcompile path.
        -v or --verbose          Be verbose.
        -h or --help             Print this message.
</literallayout>

</para>


    </sect2>
    
  </sect1>

  <sect1 id="ecell3-start">
    <title>Starting &app;</title>
    <para>You can start <application>&app;</application> either in 
    scripting mode and GUI mode.
    </para> 

    <sect2>
      <title>GUI mode</title>

	  <para>To start <application>&app;</application> 
                in GUI mode, type the following command.</para> 

      <screen><command>gecell</command> &amp;</screen>

      <para>This will invoke an instance of the simulator with
      <application>Osogo Session Manager</application> attached as a GUI
      frontend.</para>

    </sect2>


    <sect2>
      <title>Scripting mode</title>

	  <para>To start <application>&app;</application> in scripting
                mode, type the following command, then press
                <keycap>Return</keycap>:

      <screen><command>ecell3-session</command> <optional><parameter><replaceable>filename.ess</replaceable></parameter></optional></screen>

      where <replaceable>filename.ess</replaceable> is the name of the
                Python script file you want to execute.
    		</para>
	  <para>If <replaceable>filename.ess</replaceable> is omitted,
	  the interpreter starts up in interactive mode.</para>

      <para>See chapter 5 about the scripting.</para>

    </sect2>
    

  </sect1>

  <sect1>
    <title>Other Commands</title>

    
    <sect2>
      <title>Getting An &EM; File From &EML;</title>

      <para>Use <command>ecell3-eml2em</command> command to convert an
      &EML; file to an &EM; file.
</para>

      <screen>ecell3-eml2em -- convert eml to em
         
Usage:
        ecell3-eml2em [-h] [-f] [-o outfile] infile
 
         
Options:
        -h or --help    :  Print this message.
        -f or --force   :  Force overwrite even if outfile already exists.
        -o or --outfile=:  Specify output file name.  '-' means stdout.
</screen>


    </sect2>

    <sect2>
      <title>&ecell; 1 Compatibility</title>

    <para>eri2eml (unsupported), rd2dm (unsupported)

      </para>

    </sect2>

  </sect1>


  </chapter>


<!--
Local Variables:
mode: sgml
sgml-parent-document: ("users-manual.xml" "book" "chapter")
End:
-->

